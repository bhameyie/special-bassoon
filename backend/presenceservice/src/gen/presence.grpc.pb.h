// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: presence.proto
#ifndef GRPC_presence_2eproto__INCLUDED
#define GRPC_presence_2eproto__INCLUDED

#include "presence.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace presence {

class PresenceRecorder final {
 public:
  static constexpr char const* service_full_name() {
    return "presence.PresenceRecorder";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::presence::UpdateUserConnectionReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::presence::UpdateUserConnectionReply>> AsyncUpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::presence::UpdateUserConnectionReply>>(AsyncUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::presence::UpdateUserConnectionReply>> PrepareAsyncUpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::presence::UpdateUserConnectionReply>>(PrepareAsyncUpdateStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::presence::UpdateUserConnectionReply>* AsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::presence::UpdateUserConnectionReply>* PrepareAsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::presence::UpdateUserConnectionReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::presence::UpdateUserConnectionReply>> AsyncUpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::presence::UpdateUserConnectionReply>>(AsyncUpdateStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::presence::UpdateUserConnectionReply>> PrepareAsyncUpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::presence::UpdateUserConnectionReply>>(PrepareAsyncUpdateStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::presence::UpdateUserConnectionReply>* AsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::presence::UpdateUserConnectionReply>* PrepareAsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UpdateStatus(::grpc::ServerContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::presence::UpdateUserConnectionRequest* /*request*/, ::presence::UpdateUserConnectionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStatus(::grpc::ServerContext* context, ::presence::UpdateUserConnectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::presence::UpdateUserConnectionReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateStatus<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::presence::UpdateUserConnectionRequest, ::presence::UpdateUserConnectionReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response) { return this->UpdateStatus(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateStatus(
        ::grpc::experimental::MessageAllocator< ::presence::UpdateUserConnectionRequest, ::presence::UpdateUserConnectionReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::presence::UpdateUserConnectionRequest, ::presence::UpdateUserConnectionReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::presence::UpdateUserConnectionRequest* /*request*/, ::presence::UpdateUserConnectionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::presence::UpdateUserConnectionRequest* /*request*/, ::presence::UpdateUserConnectionReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::presence::UpdateUserConnectionRequest* /*request*/, ::presence::UpdateUserConnectionReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_UpdateStatus<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_UpdateStatus<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::presence::UpdateUserConnectionRequest* /*request*/, ::presence::UpdateUserConnectionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::presence::UpdateUserConnectionRequest* /*request*/, ::presence::UpdateUserConnectionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::presence::UpdateUserConnectionRequest* /*request*/, ::presence::UpdateUserConnectionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::presence::UpdateUserConnectionRequest, ::presence::UpdateUserConnectionReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::presence::UpdateUserConnectionRequest, ::presence::UpdateUserConnectionReply>* streamer) {
                       return this->StreamedUpdateStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateStatus(::grpc::ServerContext* /*context*/, const ::presence::UpdateUserConnectionRequest* /*request*/, ::presence::UpdateUserConnectionReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::presence::UpdateUserConnectionRequest,::presence::UpdateUserConnectionReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateStatus<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateStatus<Service > StreamedService;
};

class PresenceRetriever final {
 public:
  static constexpr char const* service_full_name() {
    return "presence.PresenceRetriever";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::presence::RetrieveUserPresenceByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::presence::RetrieveUserPresenceByIdResponse>> AsyncRetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::presence::RetrieveUserPresenceByIdResponse>>(AsyncRetrieveUserPresenceByUserIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::presence::RetrieveUserPresenceByIdResponse>> PrepareAsyncRetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::presence::RetrieveUserPresenceByIdResponse>>(PrepareAsyncRetrieveUserPresenceByUserIdRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::presence::RetrieveUserPresenceByIdResponse>* AsyncRetrieveUserPresenceByUserIdRaw(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::presence::RetrieveUserPresenceByIdResponse>* PrepareAsyncRetrieveUserPresenceByUserIdRaw(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::presence::RetrieveUserPresenceByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByIdResponse>> AsyncRetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByIdResponse>>(AsyncRetrieveUserPresenceByUserIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByIdResponse>> PrepareAsyncRetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByIdResponse>>(PrepareAsyncRetrieveUserPresenceByUserIdRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RetrieveUserPresenceByUserId(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByIdResponse>* AsyncRetrieveUserPresenceByUserIdRaw(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByIdResponse>* PrepareAsyncRetrieveUserPresenceByUserIdRaw(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RetrieveUserPresenceByUserId_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ServerContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RetrieveUserPresenceByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RetrieveUserPresenceByUserId() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RetrieveUserPresenceByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ServerContext* /*context*/, const ::presence::RetrieveUserPresenceByIdRequest* /*request*/, ::presence::RetrieveUserPresenceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieveUserPresenceByUserId(::grpc::ServerContext* context, ::presence::RetrieveUserPresenceByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::presence::RetrieveUserPresenceByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RetrieveUserPresenceByUserId<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RetrieveUserPresenceByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RetrieveUserPresenceByUserId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::presence::RetrieveUserPresenceByIdRequest, ::presence::RetrieveUserPresenceByIdResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponse* response) { return this->RetrieveUserPresenceByUserId(context, request, response); }));}
    void SetMessageAllocatorFor_RetrieveUserPresenceByUserId(
        ::grpc::experimental::MessageAllocator< ::presence::RetrieveUserPresenceByIdRequest, ::presence::RetrieveUserPresenceByIdResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::presence::RetrieveUserPresenceByIdRequest, ::presence::RetrieveUserPresenceByIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RetrieveUserPresenceByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ServerContext* /*context*/, const ::presence::RetrieveUserPresenceByIdRequest* /*request*/, ::presence::RetrieveUserPresenceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RetrieveUserPresenceByUserId(
      ::grpc::CallbackServerContext* /*context*/, const ::presence::RetrieveUserPresenceByIdRequest* /*request*/, ::presence::RetrieveUserPresenceByIdResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RetrieveUserPresenceByUserId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::presence::RetrieveUserPresenceByIdRequest* /*request*/, ::presence::RetrieveUserPresenceByIdResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RetrieveUserPresenceByUserId<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RetrieveUserPresenceByUserId<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RetrieveUserPresenceByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RetrieveUserPresenceByUserId() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RetrieveUserPresenceByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ServerContext* /*context*/, const ::presence::RetrieveUserPresenceByIdRequest* /*request*/, ::presence::RetrieveUserPresenceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RetrieveUserPresenceByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RetrieveUserPresenceByUserId() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RetrieveUserPresenceByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ServerContext* /*context*/, const ::presence::RetrieveUserPresenceByIdRequest* /*request*/, ::presence::RetrieveUserPresenceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRetrieveUserPresenceByUserId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RetrieveUserPresenceByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RetrieveUserPresenceByUserId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RetrieveUserPresenceByUserId(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RetrieveUserPresenceByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ServerContext* /*context*/, const ::presence::RetrieveUserPresenceByIdRequest* /*request*/, ::presence::RetrieveUserPresenceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RetrieveUserPresenceByUserId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RetrieveUserPresenceByUserId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RetrieveUserPresenceByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RetrieveUserPresenceByUserId() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::presence::RetrieveUserPresenceByIdRequest, ::presence::RetrieveUserPresenceByIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::presence::RetrieveUserPresenceByIdRequest, ::presence::RetrieveUserPresenceByIdResponse>* streamer) {
                       return this->StreamedRetrieveUserPresenceByUserId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RetrieveUserPresenceByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RetrieveUserPresenceByUserId(::grpc::ServerContext* /*context*/, const ::presence::RetrieveUserPresenceByIdRequest* /*request*/, ::presence::RetrieveUserPresenceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRetrieveUserPresenceByUserId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::presence::RetrieveUserPresenceByIdRequest,::presence::RetrieveUserPresenceByIdResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RetrieveUserPresenceByUserId<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RetrieveUserPresenceByUserId<Service > StreamedService;
};

}  // namespace presence


#endif  // GRPC_presence_2eproto__INCLUDED
