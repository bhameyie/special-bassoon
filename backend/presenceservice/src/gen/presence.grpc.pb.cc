// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: presence.proto

#include "presence.pb.h"
#include "presence.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace presence {

static const char* PresenceRecorder_method_names[] = {
  "/presence.PresenceRecorder/UpdateStatus",
};

std::unique_ptr< PresenceRecorder::Stub> PresenceRecorder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PresenceRecorder::Stub> stub(new PresenceRecorder::Stub(channel));
  return stub;
}

PresenceRecorder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UpdateStatus_(PresenceRecorder_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PresenceRecorder::Stub::UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::presence::UpdateUserConnectionReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::presence::UpdateUserConnectionRequest, ::presence::UpdateUserConnectionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateStatus_, context, request, response);
}

void PresenceRecorder::Stub::experimental_async::UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::presence::UpdateUserConnectionRequest, ::presence::UpdateUserConnectionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStatus_, context, request, response, std::move(f));
}

void PresenceRecorder::Stub::experimental_async::UpdateStatus(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::presence::UpdateUserConnectionReply>* PresenceRecorder::Stub::PrepareAsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::presence::UpdateUserConnectionReply, ::presence::UpdateUserConnectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::presence::UpdateUserConnectionReply>* PresenceRecorder::Stub::AsyncUpdateStatusRaw(::grpc::ClientContext* context, const ::presence::UpdateUserConnectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

PresenceRecorder::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PresenceRecorder_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PresenceRecorder::Service, ::presence::UpdateUserConnectionRequest, ::presence::UpdateUserConnectionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PresenceRecorder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::presence::UpdateUserConnectionRequest* req,
             ::presence::UpdateUserConnectionReply* resp) {
               return service->UpdateStatus(ctx, req, resp);
             }, this)));
}

PresenceRecorder::Service::~Service() {
}

::grpc::Status PresenceRecorder::Service::UpdateStatus(::grpc::ServerContext* context, const ::presence::UpdateUserConnectionRequest* request, ::presence::UpdateUserConnectionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* PresenceRetriever_method_names[] = {
  "/presence.PresenceRetriever/RetrieveUserPresenceByDevice",
  "/presence.PresenceRetriever/RetrieveUserPresenceById",
};

std::unique_ptr< PresenceRetriever::Stub> PresenceRetriever::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PresenceRetriever::Stub> stub(new PresenceRetriever::Stub(channel));
  return stub;
}

PresenceRetriever::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RetrieveUserPresenceByDevice_(PresenceRetriever_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RetrieveUserPresenceById_(PresenceRetriever_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PresenceRetriever::Stub::RetrieveUserPresenceByDevice(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByDeviceRequest& request, ::presence::RetrieveUserPresenceByDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::presence::RetrieveUserPresenceByDeviceRequest, ::presence::RetrieveUserPresenceByDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RetrieveUserPresenceByDevice_, context, request, response);
}

void PresenceRetriever::Stub::experimental_async::RetrieveUserPresenceByDevice(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByDeviceRequest* request, ::presence::RetrieveUserPresenceByDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::presence::RetrieveUserPresenceByDeviceRequest, ::presence::RetrieveUserPresenceByDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RetrieveUserPresenceByDevice_, context, request, response, std::move(f));
}

void PresenceRetriever::Stub::experimental_async::RetrieveUserPresenceByDevice(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByDeviceRequest* request, ::presence::RetrieveUserPresenceByDeviceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RetrieveUserPresenceByDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByDeviceResponse>* PresenceRetriever::Stub::PrepareAsyncRetrieveUserPresenceByDeviceRaw(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::presence::RetrieveUserPresenceByDeviceResponse, ::presence::RetrieveUserPresenceByDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RetrieveUserPresenceByDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByDeviceResponse>* PresenceRetriever::Stub::AsyncRetrieveUserPresenceByDeviceRaw(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRetrieveUserPresenceByDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PresenceRetriever::Stub::RetrieveUserPresenceById(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::presence::RetrieveUserPresenceByIdResponce* response) {
  return ::grpc::internal::BlockingUnaryCall< ::presence::RetrieveUserPresenceByIdRequest, ::presence::RetrieveUserPresenceByIdResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RetrieveUserPresenceById_, context, request, response);
}

void PresenceRetriever::Stub::experimental_async::RetrieveUserPresenceById(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponce* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::presence::RetrieveUserPresenceByIdRequest, ::presence::RetrieveUserPresenceByIdResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RetrieveUserPresenceById_, context, request, response, std::move(f));
}

void PresenceRetriever::Stub::experimental_async::RetrieveUserPresenceById(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponce* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RetrieveUserPresenceById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByIdResponce>* PresenceRetriever::Stub::PrepareAsyncRetrieveUserPresenceByIdRaw(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::presence::RetrieveUserPresenceByIdResponce, ::presence::RetrieveUserPresenceByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RetrieveUserPresenceById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::presence::RetrieveUserPresenceByIdResponce>* PresenceRetriever::Stub::AsyncRetrieveUserPresenceByIdRaw(::grpc::ClientContext* context, const ::presence::RetrieveUserPresenceByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRetrieveUserPresenceByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

PresenceRetriever::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PresenceRetriever_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PresenceRetriever::Service, ::presence::RetrieveUserPresenceByDeviceRequest, ::presence::RetrieveUserPresenceByDeviceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PresenceRetriever::Service* service,
             ::grpc::ServerContext* ctx,
             const ::presence::RetrieveUserPresenceByDeviceRequest* req,
             ::presence::RetrieveUserPresenceByDeviceResponse* resp) {
               return service->RetrieveUserPresenceByDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PresenceRetriever_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PresenceRetriever::Service, ::presence::RetrieveUserPresenceByIdRequest, ::presence::RetrieveUserPresenceByIdResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PresenceRetriever::Service* service,
             ::grpc::ServerContext* ctx,
             const ::presence::RetrieveUserPresenceByIdRequest* req,
             ::presence::RetrieveUserPresenceByIdResponce* resp) {
               return service->RetrieveUserPresenceById(ctx, req, resp);
             }, this)));
}

PresenceRetriever::Service::~Service() {
}

::grpc::Status PresenceRetriever::Service::RetrieveUserPresenceByDevice(::grpc::ServerContext* context, const ::presence::RetrieveUserPresenceByDeviceRequest* request, ::presence::RetrieveUserPresenceByDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PresenceRetriever::Service::RetrieveUserPresenceById(::grpc::ServerContext* context, const ::presence::RetrieveUserPresenceByIdRequest* request, ::presence::RetrieveUserPresenceByIdResponce* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace presence

